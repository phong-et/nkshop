// fetch product include product(save to disk), image product, review(save to disk), image review
let productIdList = [
    26287,
    26285,
    26284,
    26283,
    26282,
    26281,
    26280,
    26278,
    26277,
    26276,
    26275,
    26272,
    26270,
    26269,
    26267,
    26266,
    26264,
    26262,
    26260,
    26259,
    26234,
    26233,
    26229,
    26226,
    26225,
    26224,
    26223,
    26221,
    26218,
    26217,
    26214,
    26213,
    26212,
    26211,
    26210,
    26209,
    26208,
    26205,
    26204,
    26203,
    26202,
    26201,
    26200,
    26199,
    26197,
    26196,
    26193,
    26191,
    26190,
    26188,
    26187,
    26186,
    26184,
    26183,
    26182,
    26179,
    26177,
    26176,
    26175,
    26172,
    26171,
    26169,
    26168,
    26166,
    26165,
    26164,
    26163,
    26162,
    26161,
    26160,
    26159,
    26158,
    26156,
    26155,
    26154,
    26153,
    26152,
    26150,
    26149,
    26148,
    26147,
    26146,
    26145,
    26144,
    26143,
    26142,
    26140,
    26137,
    26136,
    26135,
    26131,
    26130,
    26128,
    26127,
    26125,
    26124,
    26122,
    26121,
    26119,
    26118,
    26117,
    26114,
    26113,
    26112,
    26111,
    26110,
    26108,
    26103,
    26100,
    26099,
    26098,
    26091,
    26090,
    26088,
    26087,
    26086,
    26084,
    26079,
    26078,
    26075,
    26074,
    26073,
    26072,
    26071,
    26069,
    26068,
    26067,
    26065,
    26064,
    26063,
    26058,
    26055,
    26054,
    26053,
    26052,
    26051,
    26047,
    26046,
    26044,
    26043,
    26041,
    26039,
    26038,
    26035,
    26033,
    26032,
    26030,
    26029,
    26027,
    26024,
    26022,
    26021,
    26020,
    26019,
    26017,
    26015,
    26013,
    26009,
    26006,
    26005,
    26004,
    26003,
    26002,
    25999,
    25996,
    25993,

    // 25992,
    // 25990,
    // 25989,
    // 25986,
    // 25985,
    // 25983,
    // 25977,
    // 25975,
    // 25974,
    // 25971,
    // 25970,
    // 25969,
    // 25968,
    // 25967,
    // 25965,
    // 25964,
    // 25963,
    // 25961,
    // 25960,
    // 25956,
    // 25952,
    // 25951,
    // 25949,
    // 25947,
    // 25942,
    // 25940,
    // 25939,
    // 25938,
    // 25937,
    // 25935,
    // 25932,
    // 25931,
    // 25930,
    // 25929
],
    nk = require('./nk'),
    cfg = require('./nk.cfg'),
    ProductDetail = require('./fastify/models/productDetail'),
    Review = require('./fastify/models/review'),
    log = console.log

async function delay(ms) {
    return new Promise(resolve => {
        setTimeout(resolve, ms)
    })
}

function wait(label, i, val) {
    var seconds = Array(1000, 500, 1500, 500)
    second = seconds[Math.floor(Math.random() * seconds.length)]
    log('%sId[%s] = %s, wait : ', label, i, val, second)
    return second
}
async function fetchProductDetailByListId(url, productIdList) {
    try {
        for (let i = 0; i < productIdList.length; i++) {
            await delay(wait('product', i, productIdList[i]))
            var jsonProduct = await nk.fetchJsonOfProduct(url, productIdList[i])
            if (jsonProduct) {
                log(`price:${jsonProduct.price} || ratingCount:${jsonProduct.ratingCount}`)
                await ProductDetail.insert(jsonProduct)
                await nk.fetchProduct(url, productIdList[i], jsonProduct)
                await Review.insertMany(await nk.fetchReviewListOfProductSaveDb(cfg.reviewUrl, jsonProduct.id, jsonProduct.ratingCount))
            }
            else
                log('Product is null')
        }
    } catch (error) {
        log(error.message)
    }
}

(async function () {
    fetchProductDetailByListId(cfg.productUrl, productIdList)
})()